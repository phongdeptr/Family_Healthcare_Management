/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client;

import dto.Registration_DTO;
import java.awt.HeadlessException;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import server.RegistrationInterface;

/**
 *
 * @author ADMIN
 */
public class FamilyHealthcareManagement extends javax.swing.JFrame {

    boolean isUpdate = false;
    RegistrationInterface registrationService;

    public FamilyHealthcareManagement() {
        initComponents();
        try {
            registrationService = (RegistrationInterface) Naming.lookup("rmi://localhost:2223/res");
            btnGetAllActionPerformed(null);
        } catch (RemoteException e) {
            //JOptionPane.showMessageDialog(null,"Not connect to server side");
            int option = JOptionPane.showConfirmDialog(null, "Server side not start yet", "Server not connected", JOptionPane.OK_CANCEL_OPTION);
        } catch (NotBoundException | MalformedURLException ex) {
            Logger.getLogger(FamilyHealthcareManagement.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupGender = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblRegistration = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        cbxSortOrder = new javax.swing.JComboBox<>();
        txtSearchName = new javax.swing.JTextField();
        btnSearchByName = new javax.swing.JButton();
        btnGetAll = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        txtRegistrationId = new javax.swing.JTextField();
        txtRegistrationFullName = new javax.swing.JTextField();
        txtAge = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAddress = new javax.swing.JTextArea();
        txtPhone = new javax.swing.JTextField();
        txtNumberOfMember = new javax.swing.JTextField();
        txtNumberOfChildren = new javax.swing.JTextField();
        txtNumberOfAdult = new javax.swing.JTextField();
        registrationIdLabel = new javax.swing.JLabel();
        fullNameLabel = new javax.swing.JLabel();
        age = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        phoneLabel = new javax.swing.JLabel();
        addressLabel = new javax.swing.JLabel();
        rbtnMale = new javax.swing.JRadioButton();
        rbtnFemale = new javax.swing.JRadioButton();
        sexLabel = new javax.swing.JLabel();
        childrenLabel = new javax.swing.JLabel();
        adultLabel = new javax.swing.JLabel();
        btnAddNew = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btnFindByID = new javax.swing.JButton();
        titleLable = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Main part"));

        tblRegistration.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Registration ID", "Full name", "Age", "Gender", "Phone", "Address"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblRegistration.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblRegistrationMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblRegistration);

        jLabel1.setText("Sort ");

        cbxSortOrder.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ascending", "Descending" }));
        cbxSortOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxSortOrderActionPerformed(evt);
            }
        });

        btnSearchByName.setText("Search By Name");
        btnSearchByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchByNameActionPerformed(evt);
            }
        });

        btnGetAll.setText("Get All Data");
        btnGetAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(cbxSortOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(102, 102, 102)
                        .addComponent(btnSearchByName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtSearchName, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(178, 178, 178)
                        .addComponent(btnGetAll)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cbxSortOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearchName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchByName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnGetAll)
                .addGap(107, 107, 107))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Detail part"));

        txtAddress.setColumns(20);
        txtAddress.setRows(5);
        jScrollPane1.setViewportView(txtAddress);

        registrationIdLabel.setText("Registration ID:");

        fullNameLabel.setText("Fullname:");

        age.setText("Age:");

        emailLabel.setText("Email:");

        phoneLabel.setText("Phone");

        addressLabel.setText("Address:");

        buttonGroupGender.add(rbtnMale);
        rbtnMale.setText("Male");

        buttonGroupGender.add(rbtnFemale);
        rbtnFemale.setText("Female");

        sexLabel.setText("Sex:");

        childrenLabel.setText("Children");

        adultLabel.setText("Adult");

        btnAddNew.setText("Add new");
        btnAddNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        jLabel2.setText("Number of Member");

        btnFindByID.setText("Find by ID");
        btnFindByID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindByIDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(registrationIdLabel)
                    .addComponent(fullNameLabel)
                    .addComponent(age)
                    .addComponent(emailLabel)
                    .addComponent(addressLabel)
                    .addComponent(phoneLabel)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnAddNew)
                        .addGap(55, 55, 55)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                        .addComponent(btnRemove)
                        .addGap(3, 3, 3))
                    .addComponent(txtPhone, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtRegistrationFullName, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(txtNumberOfChildren, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(childrenLabel)
                        .addGap(36, 36, 36)
                        .addComponent(txtNumberOfAdult, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(adultLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtNumberOfMember, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(sexLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(rbtnMale, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbtnFemale))
                    .addComponent(txtEmail)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(txtRegistrationId, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56)
                        .addComponent(btnFindByID)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(140, 140, 140))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtRegistrationId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(registrationIdLabel))
                    .addComponent(btnFindByID, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fullNameLabel)
                    .addComponent(txtRegistrationFullName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(age)
                    .addComponent(rbtnMale)
                    .addComponent(rbtnFemale)
                    .addComponent(sexLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailLabel))
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(phoneLabel))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(addressLabel)))
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNumberOfMember, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(32, 32, 32)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNumberOfChildren, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNumberOfAdult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(childrenLabel)
                    .addComponent(adultLabel))
                .addGap(52, 52, 52)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddNew)
                    .addComponent(btnSave)
                    .addComponent(btnRemove))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        titleLable.setText("Family Healthcare Management");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(467, 467, 467)
                .addComponent(titleLable, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLable, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 677, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewActionPerformed
        // TODO add your handling code here:
        String resetString = "";
        txtRegistrationId.setEnabled(true);
        txtRegistrationId.setText("");
        txtRegistrationFullName.setText(resetString);
        txtEmail.setText(resetString);
        txtAge.setText(resetString);
        txtPhone.setText(resetString);
        txtNumberOfMember.setText(resetString);
        txtNumberOfChildren.setText(resetString);
        txtNumberOfAdult.setText(resetString);
        txtAddress.setText(resetString);
        buttonGroupGender.setSelected((ButtonModel) rbtnMale.getModel(), true);
        isUpdate = false;
    }//GEN-LAST:event_btnAddNewActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:\
        String validMessage = "";
        try {
            String regID = txtRegistrationId.getText();
            String regFullName = txtRegistrationFullName.getText();
            Boolean regGender = false;
            String regPhone = txtPhone.getText();
            String regEmail = txtEmail.getText();
            String regNumberOfChildren = txtNumberOfChildren.getText();
            String regNumberOfAdult = txtNumberOfAdult.getText();
            validMessage = new checkValid().validRegistration(regID, regFullName, regEmail, regPhone, regNumberOfChildren, regNumberOfAdult);
            Integer regAge = new Integer(txtAge.getText());
            Integer regNumberOfMember = new Integer(txtNumberOfMember.getText());
            if (validMessage.equalsIgnoreCase("success")) {
                System.out.println("Valid ok");
                if (!isUpdate) {
                    if (buttonGroupGender.isSelected(rbtnMale.getModel())) {
                        regGender = true;
                    } else {
                        regGender = false;
                    }
                    if (registrationService.findByRegistrationID(regID) == null) {
                        Registration_DTO addnew = new Registration_DTO(txtRegistrationId.getText(),
                                txtRegistrationFullName.getText(),
                                new Integer(txtAge.getText()),
                                regGender, txtEmail.getText(),
                                txtPhone.getText(),
                                txtAddress.getText(),
                                new Integer(txtNumberOfMember.getText()),
                                new Integer(txtNumberOfChildren.getText()),
                                new Integer(txtNumberOfAdult.getText()));
                        registrationService.createRegistration(addnew);
                        btnGetAllActionPerformed(null);
                    } else {
                        JOptionPane.showMessageDialog(null, "Duplicate ID");
                    }
                    //btnAddNewActionPerformed(null);
                    // Logger.getLogger(FamilyHealthcareManagement.class.getName()).log(Level.SEVERE, null, ex);

                } else {
                    if (buttonGroupGender.isSelected(rbtnMale.getModel())) {
                        regGender = true;
                    } else {
                        regGender = false;
                    }
                    System.out.println("Reg gender: " + regGender);
                    Registration_DTO addnew = new Registration_DTO(txtRegistrationId.getText(),
                            txtRegistrationFullName.getText(),
                            new Integer(txtAge.getText()),
                            regGender,
                            txtEmail.getText(),
                            txtPhone.getText(),
                            txtAddress.getText(),
                            new Integer(txtNumberOfMember.getText()),
                            new Integer(txtNumberOfChildren.getText()),
                            new Integer(txtNumberOfAdult.getText()));
                    System.out.println(registrationService.updateRegistration(addnew));
                    btnGetAllActionPerformed(null);
                }
            } else {
                JOptionPane.showMessageDialog(null, validMessage);
            }
        } catch (NumberFormatException num) {
            //System.out.println(num);
            JOptionPane.showMessageDialog(null, "Number of Member/Children/Adult must >=0  and is number");
            //System.out.println(validMessage);
        } catch (RemoteException ex) {
            //Logger.getLogger(FamilyHealthcareManagement.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Fail in server side or Fail to connect server side");
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnGetAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetAllActionPerformed
        // TODO add your handling code here:
        try {
            DefaultTableModel model = (DefaultTableModel) tblRegistration.getModel();
            ArrayList<Registration_DTO> loadList = registrationService.findAllRegistration();
            model.setNumRows(0);
            if (cbxSortOrder.getSelectedItem().
                    toString()
                    .equalsIgnoreCase("ascending")) {
                Collections.sort(loadList);
            } else {
                Collections.sort(loadList);
                Collections.reverse(loadList);
            }
            Collections.sort(loadList);
            for (int i = 0; i < loadList.size(); i++) {
                Registration_DTO get = loadList.get(i);
                Vector row = new Vector();
                row.add(get.getRegistrationID());
                row.add(get.getFullName());
                row.add(get.getAge());
                if (get.getGender()) {
                    row.add("Male");
                } else {
                    row.add("Female");
                }
                row.add(get.getPhone());
                row.add(get.getAddress());
                model.addRow(row);
            }
        } catch (RemoteException ex) {
            Logger.getLogger(FamilyHealthcareManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnGetAllActionPerformed

    private void cbxSortOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxSortOrderActionPerformed
        // TODO add your handling code here:
        if (cbxSortOrder.getSelectedItem().toString().equalsIgnoreCase("ascending")) {
            if (!txtSearchName.getText().trim().isEmpty()) {
                loadRegistrationToTable("ascending", txtSearchName.getText());
            } else {
                loadRegistrationToTable("ascending", "");
            }
        } else {
            if (!txtSearchName.getText().trim().isEmpty()) {
                loadRegistrationToTable("", txtSearchName.getText());
            } else {
                loadRegistrationToTable("", txtSearchName.getText());
            }
        }
    }//GEN-LAST:event_cbxSortOrderActionPerformed

    private void btnSearchByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchByNameActionPerformed
        // TODO add your handling code here:
        loadRegistrationToTable(cbxSortOrder.getSelectedItem().toString(), txtSearchName.getText());
    }//GEN-LAST:event_btnSearchByNameActionPerformed

    private void btnFindByIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindByIDActionPerformed
        try {
            // TODO add your handling code here:
            Registration_DTO registrationSerFindByIdResult = registrationService.findByRegistrationID(txtRegistrationId.getText());
            if (registrationSerFindByIdResult != null) {
                txtRegistrationFullName.setText(registrationSerFindByIdResult.getFullName());
                txtAge.setText(registrationSerFindByIdResult.getAge().toString());
                txtEmail.setText(registrationSerFindByIdResult.getEmail());
                if (registrationSerFindByIdResult.getGender()) {
                    rbtnMale.setSelected(true);
                } else {
                    rbtnFemale.setSelected(true);
                }
                txtPhone.setText(registrationSerFindByIdResult.getPhone());
                txtAddress.setText(registrationSerFindByIdResult.getAddress());
                txtNumberOfMember.setText(registrationSerFindByIdResult.getNumberOfMember().toString());
                txtNumberOfChildren.setText(registrationSerFindByIdResult.getNumberOfChildren().toString());
                txtNumberOfAdult.setText(registrationSerFindByIdResult.getNumberOfAdults().toString());
                txtRegistrationId.setEnabled(false);
            } else {
                JOptionPane.showMessageDialog(null, "Not found");
            }
        } catch (RemoteException ex) {
            Logger.getLogger(FamilyHealthcareManagement.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            isUpdate = true;
        }
    }//GEN-LAST:event_btnFindByIDActionPerformed

    private void tblRegistrationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRegistrationMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblRegistration.getModel();
        int selectedRow = tblRegistration.getSelectedRow();
        String selectedID = model.getValueAt(selectedRow, 0).toString();
        try {
            Registration_DTO dto = registrationService.findByRegistrationID(selectedID);
            if (dto != null) {
                isUpdate = true;
                txtRegistrationId.setText(dto.getRegistrationID());
                txtRegistrationId.setEnabled(false);
                txtRegistrationFullName.setText(dto.getFullName());
                txtAge.setText(dto.getAge().toString());
                txtEmail.setText(dto.getEmail());
                txtPhone.setText(dto.getPhone());
                txtAddress.setText(dto.getAddress());
                txtNumberOfMember.setText(dto.getNumberOfMember().toString());
                txtNumberOfChildren.setText(dto.getNumberOfChildren().toString());
                txtNumberOfAdult.setText(dto.getNumberOfAdults().toString());
                if (dto.getGender()) {
                    rbtnMale.setSelected(true);
                } else {
                    rbtnFemale.setSelected(true);
                }
            }
        } catch (RemoteException ex) {
            Logger.getLogger(FamilyHealthcareManagement.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_tblRegistrationMouseClicked

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        try {
            int choice = JOptionPane.showConfirmDialog(null, "Do you want to delete this registration now", "Delete Message", JOptionPane.YES_NO_OPTION);
            if (choice == JOptionPane.YES_OPTION) {
                if (registrationService.removeRegistration(txtRegistrationId.getText())) {
                    JOptionPane.showMessageDialog(null, "Delete Success");
                    btnGetAllActionPerformed(null);
                }
            } else {

            }
        } catch (HeadlessException | RemoteException e) {

        }
    }//GEN-LAST:event_btnRemoveActionPerformed
    void loadRegistrationToTable(String order, String name) {
        try {
            DefaultTableModel model = (DefaultTableModel) tblRegistration.getModel();
            ArrayList<Registration_DTO> loadList = registrationService.findAllRegistration();
            model.setNumRows(0);
            if (order.contains("ascending")) {
                Collections.sort(loadList);
            } else {
                Collections.sort(loadList);
                Collections.reverse(loadList);
            }
            if (!name.trim().isEmpty()) {
                for (int i = 0; i < loadList.size(); i++) {
                    Registration_DTO get = loadList.get(i);
                    if (get.getFullName().toLowerCase().contains(name.toLowerCase())) {
                        Vector row = new Vector();
                        row.add(get.getRegistrationID());
                        row.add(get.getFullName());
                        row.add(get.getAge());
                        if (get.getGender() == true) {
                            row.add("Male");
                        } else {
                            row.add("Female");
                        }
                        row.add(get.getPhone());
                        row.add(get.getAddress());
                        model.addRow(row);
                    }
                }
            } else {
                for (int i = 0; i < loadList.size(); i++) {
                    Registration_DTO get = loadList.get(i);
                    //System.out.println("GET USER NAME Decending: " + get.getFullName());
                    Vector row = new Vector();
                    row.add(get.getRegistrationID());
                    row.add(get.getFullName());
                    row.add(get.getAge());
                    if (get.getGender() == true) {
                        row.add("Male");
                    } else {
                        row.add("Female");
                    }
                    row.add(get.getPhone());
                    row.add(get.getAddress());
                    model.addRow(row);
                }
            }
        } catch (RemoteException ex) {
            Logger.getLogger(FamilyHealthcareManagement.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FamilyHealthcareManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FamilyHealthcareManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FamilyHealthcareManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FamilyHealthcareManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new FamilyHealthcareManagement().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addressLabel;
    private javax.swing.JLabel adultLabel;
    private javax.swing.JLabel age;
    private javax.swing.JButton btnAddNew;
    private javax.swing.JButton btnFindByID;
    private javax.swing.JButton btnGetAll;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearchByName;
    private javax.swing.ButtonGroup buttonGroupGender;
    private javax.swing.JComboBox<String> cbxSortOrder;
    private javax.swing.JLabel childrenLabel;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JLabel fullNameLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel phoneLabel;
    private javax.swing.JRadioButton rbtnFemale;
    private javax.swing.JRadioButton rbtnMale;
    private javax.swing.JLabel registrationIdLabel;
    private javax.swing.JLabel sexLabel;
    private javax.swing.JTable tblRegistration;
    private javax.swing.JLabel titleLable;
    private javax.swing.JTextArea txtAddress;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtNumberOfAdult;
    private javax.swing.JTextField txtNumberOfChildren;
    private javax.swing.JTextField txtNumberOfMember;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtRegistrationFullName;
    private javax.swing.JTextField txtRegistrationId;
    private javax.swing.JTextField txtSearchName;
    // End of variables declaration//GEN-END:variables
}
